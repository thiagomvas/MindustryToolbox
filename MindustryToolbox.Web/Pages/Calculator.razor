@page "/calculator"
@inject HttpClient Http
@using MindustryToolbox.Core
@using MindustryToolbox.Core.Entities
@using MindustryToolbox.Core.ValueTypes

<MudGrid>
    <MudItem xs="12">
        <MudSelect T="CalculatorType"
                   @bind-Value="type"
                   Label="Select Calculator Type"
                   Variant="Variant.Outlined"
                   Dense="true">
            <MudSelectItem Value="CalculatorType.ProductionPerSec">Production per Second</MudSelectItem>
            <MudSelectItem Value="CalculatorType.StructureInput">Structure Input</MudSelectItem>
        </MudSelect>
    </MudItem>
</MudGrid>

<MudDivider />

@switch(type)
{
    case CalculatorType.ProductionPerSec:
        <ProductsPerSecCalculator />
        break;

    case CalculatorType.StructureInput:
        break;

    default:
        <MudText Typo="Typo.body1" Color="Color.Error">Invalid calculator type selected.</MudText>
        break;
}

@code {
    private CalculatorType type = CalculatorType.ProductionPerSec; // Default to Production per Second

    // Production / Sec calculator
    private ProductionNode node;
    private Resource resource = Resource.None;
    private double outputPerSec = 10;

    private bool isLoading = false;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var json = await Http.GetStringAsync("data/Structures.json");
            Mindustry.GetStructures(json);

            node = Mindustry.CalculateProduction(resource, outputPerSec);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load structures: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CalculateProduction()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            node = Mindustry.CalculateProduction(resource, outputPerSec);
            Console.WriteLine(node);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error calculating production: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    public enum CalculatorType
    {
        ProductionPerSec,
        StructureInput
    }
}
