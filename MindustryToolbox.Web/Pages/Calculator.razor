@page "/calculator"
@inject HttpClient Http
@using MindustryToolbox.Core
@using MindustryToolbox.Core.Entities
@using MindustryToolbox.Core.ValueTypes

<PageTitle>Mindustry Toolbox > Calculator</PageTitle>

<MudGrid>
    <MudItem xs="12" sm="6">
        <MudSelect T="Resource"
                   @bind-Value="resource"
                   HelperText="Select a resource"
                   Label="Resource"
                   Variant="Variant.Outlined"
                   Dense="true">
            @foreach (var resource in Enum.GetValues<Resource>())
            {
                <MudSelectItem Value="@resource">@resource</MudSelectItem>
            }
        </MudSelect>
    </MudItem>

    <MudItem xs="12" sm="6">
        <MudNumericField Label="Output per second"
                         @bind-Value="outputPerSec"
                         Step="0.1"
                         Min="0.1"
                         Max="10000"
                         HelperText="Rate of production"
                         Dense="true" />
    </MudItem>

    <MudItem xs="12" sm="6">
        <MudText>Liquid</MudText>
        <MudToggleGroup Disabled="true" T="string" Outlined="true" Delimiters="true" Rounded="false" CheckMark="true">
            <MudToggleItem Value="@("None")" />
            <MudToggleItem Value="@("Water")" />
            <MudToggleItem Value="@("Cryofluid")" />
        </MudToggleGroup>
    </MudItem>
    <MudItem xs="12" sm="6">
            <MudText>Overdrive</MudText>
        <MudToggleGroup Disabled="true" T="string" Outlined="true" Delimiters="true" Rounded="false" CheckMark="true">
            <MudToggleItem Value="@("None")" />
            <MudToggleItem Value="@("Projector")" />
            <MudToggleItem Value="@("Dome")" />
        </MudToggleGroup>
    </MudItem>


    <MudItem xs="12">
        <MudButton OnClick="@(() => CalculateProduction())" Color="Color.Primary" Variant="Variant.Filled" FullWidth="true" Disabled="@isLoading">
            @if (isLoading)
            {
                <MudProgressCircular Size="Size.Small" />
            }
            else
            {
                <span>Calculate</span>
            }
        </MudButton>
    </MudItem>
</MudGrid>

<MudDivider />

@if (node != null && resource == node.Resource && node.Resource != Resource.None && outputPerSec == node.OutputPerSecond)
{
    <ProductionTree Node="node" />
}
else
{
    <MudText Typo="Typo.body1" Color="Color.Error">Please calculate production to see results.</MudText>
}

@if (errorMessage != null)
{
    <MudText Typo="Typo.body2" Color="Color.Error">@errorMessage</MudText>
}

@code {
    private ProductionNode node;
    private Resource resource = Resource.None;
    private double outputPerSec = 10;
    private bool isLoading = false;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            errorMessage = null;

            var json = await Http.GetStringAsync("data/Structures.json");
            Mindustry.GetStructures(json);

            node = Mindustry.CalculateProduction(resource, outputPerSec);
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load structures: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CalculateProduction()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            node = Mindustry.CalculateProduction(resource, outputPerSec);
        }
        catch (Exception ex)
        {
            errorMessage = $"Error calculating production: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}
