@page "/sectors"
@inject HttpClient Http
@using MindustryToolbox.Core
@using MindustryToolbox.Core.Entities
@using MindustryToolbox.Core.ValueTypes

<PageTitle>MindustryToolbox > Sectors</PageTitle>

<!-- Filters Section -->
<MudTextField T="string"
Label="Search by Name"
Immediate="false"
ValueChanged="OnSearchChanged"
Value="@searchTerm"
Adornment="Adornment.Start"
AdornmentIcon="@Icons.Material.Filled.Search"
Placeholder="Type to search..."
Variant="Variant.Outlined"
FullWidth="true" />
<MudGrid Spacing="0">
    @foreach (var resource in TableResources)
    {
        <MudItem>
            <MudButton Variant="@(ResourceFilter.HasFlag(resource) ? Variant.Filled : Variant.Outlined)"
            Color="@(ResourceFilter.HasFlag(resource) ? Color.Primary : Color.Secondary)"
            OnClick="@(() => ApplyFilter(resource))"
            Style="min-width: 120px; padding: 0;">
                <MudTooltip Text="@($"Show only sectors with {resource}")">@resource</MudTooltip>
            </MudButton>
        </MudItem>
    }
</MudGrid>
<MudStack Row="true" Spacing="2">
    <MudButton OnClick="@(async () => await FilterAsync())"
    Variant="Variant.Outlined"
    Color="Color.Primary"
    StartIcon="@Icons.Material.Filled.Filter"
    Style="margin-left: 8px;">
        Apply Filters
    </MudButton>

    <MudButton OnClick="ClearFilters"
    Variant="Variant.Outlined"
    Color="Color.Warning"
    StartIcon="@Icons.Material.Filled.Clear"
    Style="margin-left: 8px;">
        Clear Filters
    </MudButton>
</MudStack>


<!-- Loading Indicator -->
@if (!hasLoaded)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" Style="margin: auto;" />
    <MudAlert Severity="Severity.Info">The website is not frozen! It is just loading the data.</MudAlert>
}

<!-- Table Section -->
@if (hasLoaded && !filteredSectors.Any())
{
    <MudAlert Severity="Severity.Warning">No sectors match your search or filters.</MudAlert>
}
else if (hasLoaded && !filterChanged)
{
    <MudTable Items="@filteredSectors" Loading="true" Breakpoint="Breakpoint.None" FixedHeader="true" Bordered="true" Hover="true" RowsPerPage="10" Height="60vh">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Difficulty</MudTh>
            @foreach (var resource in TableResources)
            {
                <MudTh>
                    <MudTooltip Text="@($"Has {resource}")">
                        <MudImage Alt="@resource.ToString()" ObjectPosition="ObjectPosition.Center" Width="22" Height="22" Src="@($"assets/{resource}.webp")" />
                    </MudTooltip>
                </MudTh>
            }
            <MudTh>Waves</MudTh>
            <MudTh>Vulnerable To</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>
                <MudText>
                    <strong style="color: @GetColorForThreat(context.Threat)">@context.Threat</strong>
                </MudText>
            </MudTd>
            @foreach (var resource in TableResources)
            {
                <MudTd>
                    @if (SectorHasResource(context, resource))
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Check" Color="Color.Success" />
                    }
                    else
                    {
                        <MudIcon Icon="@Icons.Material.Filled.Clear" Color="Color.Error" />
                    }
                </MudTd>
            }
            <MudTd>@(context.NumOfWaves == -1 ? "N/A" : context.NumOfWaves.ToString())</MudTd>
            @if (context.VulnerableTo.Length == 0)
            {
                <MudTd>None</MudTd>
            }
            else
            {
                <MudTd>@string.Join(", ", context.VulnerableTo.Select(v => v.ToString()))</MudTd>
            }
        </RowTemplate>
    </MudTable>


}
else
{
    <MudAlert Severity="Severity.Info">Apply the filters to see the results.</MudAlert>
}

@code {
    bool filterChanged = true;
    private Sector[] allSectors = [];
    private Sector[] filteredSectors = [];
    private string searchTerm = string.Empty;
    private Resource ResourceFilter { get; set; } = Resource.None;
    private bool hasLoaded = false;
    private Resource[] TableResources = [
        Resource.Copper,
    Resource.Lead,
    Resource.Sand,
    Resource.Coal,
    Resource.Titanium,
    Resource.Thorium,
    Resource.Scrap,
    Resource.Water,
    Resource.Oil,
    Resource.Magma,
    ];

    protected override async Task OnInitializedAsync()
    {
        hasLoaded = false;
        var text = await Http.GetStringAsync("data/Sectors.txt");
        var context = new MindustryDbContext();
        context.ParseSectors(text);
        allSectors = context.Sectors.ToArray();
        await FilterAsync();
        hasLoaded = true;
    }

    private async Task FilterAsync()
    {
        if (ResourceFilter == Resource.None && searchTerm == "")
        {
            filteredSectors = allSectors;
            return;
        }

        await Task.Run(() =>
        {
            filteredSectors = allSectors
                .Where(s =>
                    (ResourceFilter == Resource.None || s.Resources.HasFlag(ResourceFilter)) &&
                    (string.IsNullOrWhiteSpace(searchTerm) || s.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
                .ToArray();
        });
        StateHasChanged();
        filterChanged = false;
    }

    private async void ApplyFilter(Resource filter)
    {
        ResourceFilter = ResourceFilter.HasFlag(filter) ? ResourceFilter & ~filter : ResourceFilter | filter;
        filterChanged = true;
    }


    private async void OnSearchChanged(string value)
    {
        searchTerm = value;
        filterChanged = true;
    }

    private async void ClearFilters()
    {
        searchTerm = string.Empty;
        ResourceFilter = Resource.None;
        filteredSectors = allSectors;
        filterChanged = false;
    }

    private bool SectorHasResource(Sector s, Resource r)
    {
        return s.Resources.HasFlag(r);
    }

    private string GetColorForThreat(Threat threat)
    {
        return threat switch
        {
            Threat.Low => "#e6e6e6",
            Threat.Medium => "#ffccc6",
            Threat.High => "#ff998d",
            Threat.Extreme => "#ff0000",
            Threat.Eradication => "#9c0000",
            _ => "purple"
        };
    }
}
