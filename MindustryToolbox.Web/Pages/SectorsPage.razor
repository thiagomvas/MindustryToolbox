@page "/sectors"
@inject HttpClient Http
@using MindustryToolbox.Core
@using MindustryToolbox.Core.Entities
@using MindustryToolbox.Core.ValueTypes

<PageTitle>MindustryToolbox > Sectors</PageTitle>

<!-- Filters Section -->
<MudTextField T="string"
              Label="Search by Name"
              Immediate="false"
              ValueChanged="OnSearchChanged"
              Value="@searchTerm"
              Adornment="Adornment.Start"
              AdornmentIcon="@Icons.Material.Filled.Search"
              Placeholder="Type to search..."
              Variant="Variant.Outlined"
              FullWidth="true" />
<MudGrid Spacing="0">
    @foreach (var resource in TableResources)
    {
        <MudItem>
            <MudButton Variant="@(ResourceFilter.HasFlag(resource) ? Variant.Filled : Variant.Outlined)"
                       Color="@(ResourceFilter.HasFlag(resource) ? Color.Primary : Color.Secondary)"
                       OnClick="@(() => ApplyFilter(resource))"
                       Style="min-width: 120px; padding: 0;">
                <MudTooltip Text="@($"Show only sectors with {resource}")">@resource</MudTooltip>
            </MudButton>
        </MudItem>
    }
</MudGrid>
<MudCheckBox @bind-Value="noVulnerabilities">
    Show only sectors with no vulnerabilities
</MudCheckBox>
<MudStack Row="true" Spacing="2">
    <MudButton OnClick="@(async () => await FilterAsync())"
               Variant="Variant.Outlined"
               Color="Color.Primary"
               StartIcon="@Icons.Material.Filled.Filter"
               Style="margin-left: 8px;">
        Apply Filters
    </MudButton>

    <MudButton OnClick="ClearFilters"
               Variant="Variant.Outlined"
               Color="Color.Warning"
               StartIcon="@Icons.Material.Filled.Clear"
               Style="margin-left: 8px;">
        Clear Filters
    </MudButton>
</MudStack>


<!-- Loading Indicator -->
@if (!hasLoaded)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" Style="margin: auto;" />
    <MudAlert Severity="Severity.Info">The website is not frozen! It is just loading the data.</MudAlert>
}

<!-- Table Section -->
@if (hasLoaded && !filteredSectors.Any())
{
    <MudAlert Severity="Severity.Warning">No sectors match your search or filters.</MudAlert>
}
else if (hasLoaded && !filterChanged)
{
    <div style="height:50vh;">

        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Difficulty</th>
                    @foreach (var resource in TableResources)
                    {
                        <th>
                            <img style="width: 22px; height: 22px;" src="@($"assets/{resource}.webp")" />
                        </th>
                    }
                    <th>Waves</th>
                    <th>Vulnerable To</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var sector in filteredSectors)
                {
                    <tr>
                        <td>@sector.Name</td>
                        <td>
                            <strong style="color: @GetColorForThreat(sector.Threat)">@sector.Threat</strong>
                        </td>
                        @foreach (var resource in TableResources)
                        {
                            <td>
                                @if (SectorHasResource(sector, resource))
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" color="#F44336" height="24" viewBox="0 0 24 24" width="24"><path d="M0 0h24v24H0z" fill="none" /><path fill="#4CAF50" stroke="#4CAF50" d="M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z" /></svg>
                                }
                                else
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 0 24 24" width="24"><path d="M0 0h24v24H0z" fill="none" /><path fill="#F44336" stroke="#F44336" d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z" /></svg>
                                }
                            </td>
                        }
                        <td>@(sector.NumOfWaves == -1 ? "N/A" : sector.NumOfWaves.ToString())</td>
                        @if (sector.VulnerableTo.Length == 0)
                        {
                            <td>None</td>
                        }
                        else
                        {
                            <td>@string.Join(", ", sector.VulnerableTo.Select(v => v.ToString()))</td>
                        }
                    </tr>
                }
            </tbody>
        </table>
    </div>

}
else
{
    <MudAlert Severity="Severity.Info">Apply the filters to see the results.</MudAlert>
}

@code {
    bool filterChanged = true;
    private Sector[] allSectors = [];
    private Sector[] filteredSectors = [];
    private string searchTerm = string.Empty;
    private Resource ResourceFilter { get; set; } = Resource.None;
    private bool noVulnerabilities = false;

    private bool hasLoaded = false;
    private Resource[] TableResources = [
        Resource.Copper,
    Resource.Lead,
    Resource.Sand,
    Resource.Coal,
    Resource.Titanium,
    Resource.Thorium,
    Resource.Scrap,
    Resource.Water,
    Resource.Oil,
    Resource.Magma,
    ];

    protected override async Task OnInitializedAsync()
    {
        hasLoaded = false;
        var text = await Http.GetStringAsync("data/Sectors.txt");
        var context = new MindustryDbContext();
        context.ParseSectors(text);
        allSectors = context.Sectors.ToArray();
        await FilterAsync();
        hasLoaded = true;
    }

    private async Task FilterAsync()
    {
        if (ResourceFilter == Resource.None && searchTerm == "")
        {
            filteredSectors = allSectors;
            filterChanged = false;
            return;
        }

        await Task.Run(() =>
        {
            filteredSectors = allSectors
                .Where(s =>
                    (ResourceFilter == Resource.None || s.Resources.HasFlag(ResourceFilter)) &&
                    (string.IsNullOrWhiteSpace(searchTerm) || s.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)) &&
                    (!noVulnerabilities || s.VulnerableTo.Length == 0))
                .ToArray();
        });
        StateHasChanged();
        filterChanged = false;
    }

    private async void ApplyFilter(Resource filter)
    {
        ResourceFilter = ResourceFilter.HasFlag(filter) ? ResourceFilter & ~filter : ResourceFilter | filter;
        filterChanged = true;
    }


    private async void OnSearchChanged(string value)
    {
        searchTerm = value;
        filterChanged = true;
    }

    private async void ClearFilters()
    {
        searchTerm = string.Empty;
        ResourceFilter = Resource.None;
        filteredSectors = allSectors;
        filterChanged = false;
    }

    private bool SectorHasResource(Sector s, Resource r)
    {
        return s.Resources.HasFlag(r);
    }

    private string GetColorForThreat(Threat threat)
    {
        return threat switch
        {
            Threat.Low => "#e6e6e6",
            Threat.Medium => "#ffccc6",
            Threat.High => "#ff998d",
            Threat.Extreme => "#ff0000",
            Threat.Eradication => "#9c0000",
            _ => "purple"
        };
    }
}
