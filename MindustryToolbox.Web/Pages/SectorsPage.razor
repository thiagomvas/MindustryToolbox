@page "/sectors"
@inject HttpClient Http
@using MindustryToolbox.Core
@using MindustryToolbox.Core.Entities
@using MindustryToolbox.Core.ValueTypes

<!-- Filters Section -->
<MudStack  Direction="Row" AlignItems="AlignItems.Center" Spacing="2" JustifyContent="JustifyContent.Start">
    <MudTextField T="string"
    Label="Search by Name"
    Immediate="true"
    ValueChanged="OnSearchChanged"
    Value="@searchTerm"
    Adornment="Adornment.Start"
    AdornmentIcon="@Icons.Material.Filled.Search"
    Placeholder="Type to search..."
    Variant="Variant.Outlined"
    FullWidth="true"/>

    <MudStack Row="true" Spacing="1" Style="width: 100%;">
        @foreach (var resource in TableResources)
        {
            <MudButton Variant="@(ResourceFilter.HasFlag(resource) ? Variant.Filled : Variant.Outlined)"
            Color="@(ResourceFilter.HasFlag(resource) ? Color.Primary : Color.Secondary)"
            OnClick="@(() => ApplyFilter(resource))"
            Style="min-width: 120px;">
                <MudTooltip Text="@($"Show only sectors with {resource}")">@resource</MudTooltip>
            </MudButton>
        }
    </MudStack>

    <MudButton OnClick="ClearFilters"
    Variant="Variant.Outlined"
    Color="Color.Warning"
    StartIcon="@Icons.Material.Filled.Clear"
    Style="margin-left: 8px;">
        Clear Filters
    </MudButton>
</MudStack>


<!-- Loading Indicator -->
@if (!hasLoaded)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" Style="margin: auto;" />
}

<!-- Table Section -->
@if (hasLoaded && !filteredSectors.Any())
{
    <MudAlert Severity="Severity.Warning">No sectors match your search or filters.</MudAlert>
}
else if (hasLoaded)
{
    <MudTable Items="@filteredSectors" FixedHeader="true" Height="70vh" Bordered="true" Hover="true" RowsPerPage="10" Breakpoint="Breakpoint.Md">
        <HeaderContent>
            <MudTh>Name</MudTh>
            <MudTh>Difficulty</MudTh>
            @foreach (var resource in TableResources)
            {
                <MudTh>@resource</MudTh>
            }
            <MudTh>Waves</MudTh>
            <MudTh>Vulnerable To</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>@context.Name</MudTd>
            <MudTd>@context.Threat</MudTd>
            @foreach (var resource in TableResources)
            {
                <MudTd>@SectorHasResourceString(context, resource)</MudTd>
            }
            <MudTd>@context.NumOfWaves</MudTd>
            <MudTd>@string.Join(", ", context.VulnerableTo.Select(v => v.ToString()))</MudTd>
        </RowTemplate>
    </MudTable>
}

@code {
    private List<Sector> allSectors = new();
    private IEnumerable<Sector> filteredSectors = new List<Sector>();
    private string searchTerm = string.Empty;
    private Resource ResourceFilter { get; set; } = Resource.None;
    private bool hasLoaded = false;
    private Resource[] TableResources = [
        Resource.Copper,
    Resource.Lead,
    Resource.Sand,
    Resource.Coal,
    Resource.Titanium,
    Resource.Thorium,
    Resource.Water,
    Resource.Oil,
    Resource.Magma,
    ];

    protected override async Task OnInitializedAsync()
    {
        hasLoaded = false;
        var text = await Http.GetStringAsync("data/Sectors.txt");
        var context = new MindustryDbContext();
        context.ParseSectors(text);
        allSectors = context.Sectors;
        Filter();
        hasLoaded = true;
    }

    private void Filter()
    {
        filteredSectors = allSectors.Where(s =>
            (ResourceFilter == Resource.None || s.Resources.HasFlag(ResourceFilter)) &&
            (string.IsNullOrWhiteSpace(searchTerm) || s.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)));
    }

    private void ApplyFilter(Resource filter)
    {
        ResourceFilter = ResourceFilter.HasFlag(filter) ? ResourceFilter & ~filter : ResourceFilter | filter;
        Filter();
    }


    private void OnSearchChanged(string value)
    {
        searchTerm = value;
        Filter();
    }

    private void ClearFilters()
    {
        searchTerm = string.Empty;
        ResourceFilter = Resource.None;
        Filter();
    }

    private string SectorHasResourceString(Sector s, Resource r)
    {
        return s.Resources.HasFlag(r) ? "Yes" : "No";
    }
}
